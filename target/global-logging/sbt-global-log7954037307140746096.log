[0m[[0m[0mdebug[0m] [0m[0m> Exec(;Test/compile; collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(Test/compile, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Test / compile[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"7","parents":[]},"eventTime":1647211683328,"message":"Compiling graph_squelette","dataKind":"compile-task","data":{"target":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Compile"}}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/Arc.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/undirected/SimpleGraphDefaultImpl.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraphMatrixImpl.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraphSuccessorsImpl.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/main.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/undirected/SimpleGraphMatrixImpl.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraph.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/undirected/SimpleGraphNeighborsImpl.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraphDefaultImpl.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/undirected/SimpleGraph.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Compile"},"diagnostics":[{"range":{"start":{"line":35,"character":9},"end":{"line":35,"character":22}},"severity":2,"source":"sbt","message":"comparing values of types V and V using `equals` unsafely bypasses cooperative equality; use `==` instead"}],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/undirected/Edge.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Compile"},"diagnostics":[{"range":{"start":{"line":26,"character":20},"end":{"line":26,"character":27}},"severity":2,"source":"sbt","message":"abstract type V in type pattern undirected.Edge[V] is unchecked since it is eliminated by erasure"}],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"7","parents":[]},"eventTime":1647211683364,"message":"Compiled graph_squelette","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Compile"},"errors":0,"warnings":2,"time":36}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"8","parents":[]},"eventTime":1647211683372,"message":"Compiling graph_squelette-test","dataKind":"compile-task","data":{"target":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Test"}}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/test/scala/directed/StrictGraphDefaultImplSpec.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/main.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/test/scala/undirected/SimpleGraphSpec.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/test/scala/undirected/SimpleGraphDefaultImplSpec.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/test/scala/directed/StrictGraphSpec.scala"},"buildTarget":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"8","parents":[]},"eventTime":1647211683399,"message":"Compiled graph_squelette-test","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/C:/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/#graph_squelette/Test"},"errors":0,"warnings":0,"time":27}})[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Mar 13, 2022 11:48:03 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\CYTech Student\OneDrive\Documents\GitHub\graph_squelette\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Mar 13, 2022 11:48:03 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol Sequence[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition potentials: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/undirected/Edge.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraph.scala","languageId":"scala","version":1,"text":"package directed\n\nimport scala.annotation.tailrec\n\n/** Trait for a directed ''and strict'' graph, i.e. without loop nor parallel arcs */\ntrait StrictGraph[V] {\n    /* QUERY METHODS */\n\n    /** The set of all vertices of the graph */\n    val vertices : Set[V]\n\n    /** The set of all     arcs of the graph */\n    val arcs : Set[Arc[V]]\n\n    /** The set of all vertices with arcs incoming from input vertex\n      * @param v vertex\n      * @return [[None]] if `v` is not an actual vertex, the set of all successors of `v` otherwise\n      */\n    def successorsOf(v : V) : Option[Set[V]]\n\n    /** The number of incoming arcs to input vertex\n      * @param v vertex\n      * @return [[None]] if `v` is not an actual vertex, the inner degree of `v` otherwise\n      */\n    def inDegreeOf(v : V) : Option[Int] = ???\n\n    /** The number of outcoming arcs to input vertex\n      * @param v vertex\n      * @return [[None]] if `v` is not an actual vertex, the outer degree of `v` otherwise\n      */\n    def outDegreeOf(v : V) : Option[Int] = ???\n\n    /** The number of adjacent vertices to input vertex\n      * @param v vertex\n      * @return [[None]] if `v` is not an actual vertex, the degree of `v` otherwise\n      */\n    def degreeOf(v : V) : Option[Int] = ???\n\n    /* VERTEX OPERATIONS */\n\n    /** Add vertex to graph\n      * @param v new vertex\n      * @return the graph with new vertex `v`\n      *         if `v` is an actual vertex of graph, return input graph\n      */\n    def + (v : V) : StrictGraph[V]\n\n    /** Remove vertex from graph\n      * @param v new vertex\n      * @return the graph without vertex `v`\n      *         if `v` is not an actual vertex of graph, return input graph\n      */\n    def - (v : V) : StrictGraph[V]\n\n    /* ARC OPERATIONS */\n\n    /** Add arc to graph (also add arc ends as new vertices if necessary)\n      * @param a new arc\n      * @return the graph with new arc `e`\n      *         if `e` is an actual arc of graph, return input graph\n      */\n    def +| (a : Arc[V]) : StrictGraph[V]\n\n    /** Remove arc from graph (does NOT remove ends)\n      * @param a new arc\n      * @return the graph without arc `e`\n      *         if `e` is not an actual arc of graph, return input graph\n      */\n    def -| (a : Arc[V]) : StrictGraph[V]\n\n    /** Remove all arcs from graph but keep same vertices\n      * @return graph with same vertices without any arc\n      */\n    def withoutArc : StrictGraph[V]\n\n    /** Add all possible arc with same vertices\n      * @return graph with same vertices and all possible arcs\n      */\n    def withAllArcs : StrictGraph[V]\n\n    /* SEARCH METHODS */\n\n    /** A topological order of the vertex set (if exists) */\n    lazy val topologicalOrder : Option[Seq[V]] = ???\n\n    /* VALUATED GRAPH METHODS */\n\n    /** Computes a shortest path between two vertices\n      * @param valuation valuation of graph\n      * @param start origin      of path\n      * @param end   destination of path\n      * @return [[None]] if there is no path from `start` to `end`, the shortest path and its valuation otherwise\n      */\n    def shortestPath(valuation : Map[Arc[V], Double])(start : V, end : V) : Option[(Seq[V], Double)] = ???\n\n    /* toString-LIKE METHODS */\n\n    /** @inheritdoc */\n    override lazy val toString : String = s\"({${vertices mkString \", \"}}, {${arcs mkString \", \"}})\"\n\n    /** Graph representation in DOT language */\n    lazy val toDOTString : String = {\n        \"strict graph {\\n\" +\n        \"    // Edges\\n\" +\n        (arcs foldLeft \"    \") { _ + _.toDOTString + \"\\n    \" } + \"\\n\" +\n        \"    // Vertices\\n\" +\n        vertices.mkString(\"    \", \"\\n    \", \"\\n\") +\n        \"  }\\n\"\n      }\n\n  }\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraph.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraphDefaultImpl.scala","languageId":"scala","version":1,"text":"package directed\n\n/** Default implementation for [[StrictGraph]]\n  * @param vertices vertex set\n  * @param arcs arcs set\n  * @tparam V type for vertices\n  */\ncase class StrictGraphDefaultImpl[V](vertices : Set[V], arcs : Set[Arc[V]]) extends StrictGraph[V] {\n\n    /** @inheritdoc */\n    def successorsOf(v: V): Option[Set[V]] =\n      if (!(vertices contains v)) None else Some(vertices filter { arcs contains Arc(v, _) })\n\n    /** @inheritdoc */\n    def + (v: V): StrictGraphDefaultImpl[V] =\n      StrictGraphDefaultImpl(vertices + v, arcs)\n\n    /** @inheritdoc */\n    def - (v: V): StrictGraphDefaultImpl[V] =\n      StrictGraphDefaultImpl(vertices - v, arcs filterNot { e => Set(e._1, e._2) contains v })\n\n    /** @inheritdoc */\n    def +| (e: Arc[V]): StrictGraphDefaultImpl[V] =\n      StrictGraphDefaultImpl(vertices ++ Set(e._1, e._2), arcs + e)\n\n    /** @inheritdoc */\n    def -| (e: Arc[V]): StrictGraphDefaultImpl[V] =\n      StrictGraphDefaultImpl(vertices, arcs - e)\n\n    /** @inheritdoc */\n    def withoutArc: StrictGraphDefaultImpl[V] =\n      StrictGraphDefaultImpl(vertices, Set.empty[Arc[V]])\n\n    /** @inheritdoc */\n    def withAllArcs: StrictGraphDefaultImpl[V] =\n      StrictGraphDefaultImpl(vertices, for (v1 <- vertices ; v2 <- vertices) yield Arc(v1, v2))\n  }\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraphDefaultImpl.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraphMatrixImpl.scala","languageId":"scala","version":1,"text":"package directed\n\n/** Implementation of [[StrictGraph]] using adjacency matrix\n  * @param vs sequence of vertices in the order they are used in adjacency matrix\n  * @param adjacency adjacency matrix\n  * @tparam V type for vertices\n  */\ncase class StrictGraphMatrixImpl[V](vs : Seq[V], adjacency : IndexedSeq[IndexedSeq[Int]]) extends StrictGraph[V] {\n\n    /** @inheritdoc */\n    lazy val vertices : Set[V] = ???\n\n    /** @inheritdoc */\n    lazy val arcs : Set[Arc[V]] = ???\n\n    /** @inheritdoc */\n    def successorsOf(v : V) : Option[Set[V]] = ???\n\n    /** @inheritdoc */\n    def + (v : V) : StrictGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def - (v : V) : StrictGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def +| (e : Arc[V]) : StrictGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def -| (e : Arc[V]) : StrictGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def withoutArc : StrictGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def withAllArcs : StrictGraphMatrixImpl[V] = ???\n}\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraphMatrixImpl.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/undirected/SimpleGraphDefaultImpl.scala","languageId":"scala","version":1,"text":"package undirected\n\n/** Default implementation for [[SimpleGraph]]\n  * @param vertices vertex set\n  * @param edges edges set\n  * @tparam V type for vertices\n  */\ncase class SimpleGraphDefaultImpl[V](vertices : Set[V], edges : Set[Edge[V]]) extends SimpleGraph[V] {\n    /** @inheritdoc */\n    def neighborsOf(v: V): Option[Set[V]] =\n      if (!(vertices contains v)) None else Some(vertices filter { edges contains Edge(v, _) })\n\n    /** @inheritdoc */\n    def + (v: V): SimpleGraphDefaultImpl[V] =\n      SimpleGraphDefaultImpl(vertices + v, edges)\n\n    /** @inheritdoc */\n    def - (v: V): SimpleGraphDefaultImpl[V] =\n      SimpleGraphDefaultImpl(vertices - v, edges filterNot { e => Set(e._1, e._2) contains v })\n\n    /** @inheritdoc */\n    def +| (e: Edge[V]): SimpleGraphDefaultImpl[V] =\n      SimpleGraphDefaultImpl(vertices ++ Set(e._1, e._2), edges + e)\n\n    /** @inheritdoc */\n    def -| (e: Edge[V]): SimpleGraphDefaultImpl[V] =\n      SimpleGraphDefaultImpl(vertices, edges - e)\n\n    /** @inheritdoc */\n    def withoutEdge: SimpleGraphDefaultImpl[V] =\n      SimpleGraphDefaultImpl(vertices, Set.empty[Edge[V]])\n\n    /** @inheritdoc */\n    def withAllEdges: SimpleGraphDefaultImpl[V] =\n      SimpleGraphDefaultImpl(vertices, for (v1 <- vertices ; v2 <- vertices) yield Edge(v1, v2))\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/undirected/SimpleGraphDefaultImpl.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/undirected/SimpleGraphMatrixImpl.scala","languageId":"scala","version":1,"text":"package undirected\n\n/** Implementation of [[SimpleGraph]] using adjacency matrix\n  * @param vs sequence of vertices in the order they are used in adjacency matrix\n  * @param adjacency adjacency matrix\n  * @tparam V type for vertices\n  */\ncase class SimpleGraphMatrixImpl[V](vs : Seq[V], adjacency : IndexedSeq[IndexedSeq[Int]]) extends SimpleGraph[V] {\n\n    /** @inheritdoc */\n    lazy val vertices : Set[V] = ???\n\n    /** @inheritdoc */\n    lazy val edges : Set[Edge[V]] = ???\n\n    /** @inheritdoc */\n    def neighborsOf(v : V) : Option[Set[V]] = ???\n\n    /** @inheritdoc */\n    def + (v : V) : SimpleGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def - (v : V) : SimpleGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def +| (e : Edge[V]) : SimpleGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def -| (e : Edge[V]) : SimpleGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def withoutEdge : SimpleGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def withAllEdges : SimpleGraphMatrixImpl[V] = ???\n  }\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/undirected/SimpleGraphMatrixImpl.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/undirected/SimpleGraphNeighborsImpl.scala","languageId":"scala","version":1,"text":"package undirected\n\n/** Implementation of [[SimpleGraph]] using list of neighbors for each vertex\n  * @param neighbors associative map providing set of neighbors for each vertex\n  *                  Key must be defined for any vertex in graph : should an actual vertex have no neighbor, value is defined and is an empty set\n  * @tparam V type for vertices\n  */\ncase class SimpleGraphNeighborsImpl[V](neighbors : Map[V, Set[V]]) extends SimpleGraph[V] {\n\n    /** @inheritdoc */\n    val vertices : Set[V] = ???\n\n    /** @inheritdoc */\n    val edges : Set[Edge[V]] = ???\n\n    /** @inheritdoc */\n    def neighborsOf(v: V) : Option[Set[V]] = ???\n\n    /** @inheritdoc */\n    def + (v : V) : SimpleGraphNeighborsImpl[V] = ???\n\n    /** @inheritdoc */\n    def - (v : V) : SimpleGraphNeighborsImpl[V] = ???\n\n    /** @inheritdoc */\n    def +| (e: Edge[V]) : SimpleGraphNeighborsImpl[V] = ???\n\n    /** @inheritdoc */\n    def -| (e: Edge[V]) : SimpleGraphNeighborsImpl[V] = ???\n\n    /** @inheritdoc */\n    def withoutEdge : SimpleGraphNeighborsImpl[V] = ???\n\n    /** @inheritdoc */\n    def withAllEdges : SimpleGraphNeighborsImpl[V] = ???\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/undirected/SimpleGraphNeighborsImpl.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraph.scala","languageId":"scala","version":1,"text":"package directed\n\nimport scala.annotation.tailrec\n\n/** Trait for a directed ''and strict'' graph, i.e. without loop nor parallel arcs */\ntrait StrictGraph[V] {\n    /* QUERY METHODS */\n\n    /** The set of all vertices of the graph */\n    val vertices : Set[V]\n\n    /** The set of all     arcs of the graph */\n    val arcs : Set[Arc[V]]\n\n    /** The set of all vertices with arcs incoming from input vertex\n      * @param v vertex\n      * @return [[None]] if `v` is not an actual vertex, the set of all successors of `v` otherwise\n      */\n    def successorsOf(v : V) : Option[Set[V]]\n\n    /** The number of incoming arcs to input vertex\n      * @param v vertex\n      * @return [[None]] if `v` is not an actual vertex, the inner degree of `v` otherwise\n      */\n    def inDegreeOf(v : V) : Option[Int] = ???\n\n    /** The number of outcoming arcs to input vertex\n      * @param v vertex\n      * @return [[None]] if `v` is not an actual vertex, the outer degree of `v` otherwise\n      */\n    def outDegreeOf(v : V) : Option[Int] = ???\n\n    /** The number of adjacent vertices to input vertex\n      * @param v vertex\n      * @return [[None]] if `v` is not an actual vertex, the degree of `v` otherwise\n      */\n    def degreeOf(v : V) : Option[Int] = ???\n\n    /* VERTEX OPERATIONS */\n\n    /** Add vertex to graph\n      * @param v new vertex\n      * @return the graph with new vertex `v`\n      *         if `v` is an actual vertex of graph, return input graph\n      */\n    def + (v : V) : StrictGraph[V]\n\n    /** Remove vertex from graph\n      * @param v new vertex\n      * @return the graph without vertex `v`\n      *         if `v` is not an actual vertex of graph, return input graph\n      */\n    def - (v : V) : StrictGraph[V]\n\n    /* ARC OPERATIONS */\n\n    /** Add arc to graph (also add arc ends as new vertices if necessary)\n      * @param a new arc\n      * @return the graph with new arc `e`\n      *         if `e` is an actual arc of graph, return input graph\n      */\n    def +| (a : Arc[V]) : StrictGraph[V]\n\n    /** Remove arc from graph (does NOT remove ends)\n      * @param a new arc\n      * @return the graph without arc `e`\n      *         if `e` is not an actual arc of graph, return input graph\n      */\n    def -| (a : Arc[V]) : StrictGraph[V]\n\n    /** Remove all arcs from graph but keep same vertices\n      * @return graph with same vertices without any arc\n      */\n    def withoutArc : StrictGraph[V]\n\n    /** Add all possible arc with same vertices\n      * @return graph with same vertices and all possible arcs\n      */\n    def withAllArcs : StrictGraph[V]\n\n    /* SEARCH METHODS */\n\n    /** A topological order of the vertex set (if exists) */\n    lazy val topologicalOrder : Option[Seq[V]] = ???\n\n    /* VALUATED GRAPH METHODS */\n\n    /** Computes a shortest path between two vertices\n      * @param valuation valuation of graph\n      * @param start origin      of path\n      * @param end   destination of path\n      * @return [[None]] if there is no path from `start` to `end`, the shortest path and its valuation otherwise\n      */\n    def shortestPath(valuation : Map[Arc[V], Double])(start : V, end : V) : Option[(Seq[V], Double)] = ???\n\n    /* toString-LIKE METHODS */\n\n    /** @inheritdoc */\n    override lazy val toString : String = s\"({${vertices mkString \", \"}}, {${arcs mkString \", \"}})\"\n\n    /** Graph representation in DOT language */\n    lazy val toDOTString : String = {\n        \"strict graph {\\n\" +\n        \"    // Edges\\n\" +\n        (arcs foldLeft \"    \") { _ + _.toDOTString + \"\\n    \" } + \"\\n\" +\n        \"    // Vertices\\n\" +\n        vertices.mkString(\"    \", \"\\n    \", \"\\n\") +\n        \"  }\\n\"\n      }\n\n  }\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraph.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraphDefaultImpl.scala","languageId":"scala","version":1,"text":"package directed\n\n/** Default implementation for [[StrictGraph]]\n  * @param vertices vertex set\n  * @param arcs arcs set\n  * @tparam V type for vertices\n  */\ncase class StrictGraphDefaultImpl[V](vertices : Set[V], arcs : Set[Arc[V]]) extends StrictGraph[V] {\n\n    /** @inheritdoc */\n    def successorsOf(v: V): Option[Set[V]] =\n      if (!(vertices contains v)) None else Some(vertices filter { arcs contains Arc(v, _) })\n\n    /** @inheritdoc */\n    def + (v: V): StrictGraphDefaultImpl[V] =\n      StrictGraphDefaultImpl(vertices + v, arcs)\n\n    /** @inheritdoc */\n    def - (v: V): StrictGraphDefaultImpl[V] =\n      StrictGraphDefaultImpl(vertices - v, arcs filterNot { e => Set(e._1, e._2) contains v })\n\n    /** @inheritdoc */\n    def +| (e: Arc[V]): StrictGraphDefaultImpl[V] =\n      StrictGraphDefaultImpl(vertices ++ Set(e._1, e._2), arcs + e)\n\n    /** @inheritdoc */\n    def -| (e: Arc[V]): StrictGraphDefaultImpl[V] =\n      StrictGraphDefaultImpl(vertices, arcs - e)\n\n    /** @inheritdoc */\n    def withoutArc: StrictGraphDefaultImpl[V] =\n      StrictGraphDefaultImpl(vertices, Set.empty[Arc[V]])\n\n    /** @inheritdoc */\n    def withAllArcs: StrictGraphDefaultImpl[V] =\n      StrictGraphDefaultImpl(vertices, for (v1 <- vertices ; v2 <- vertices) yield Arc(v1, v2))\n  }\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraphDefaultImpl.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraphMatrixImpl.scala","languageId":"scala","version":1,"text":"package directed\n\n/** Implementation of [[StrictGraph]] using adjacency matrix\n  * @param vs sequence of vertices in the order they are used in adjacency matrix\n  * @param adjacency adjacency matrix\n  * @tparam V type for vertices\n  */\ncase class StrictGraphMatrixImpl[V](vs : Seq[V], adjacency : IndexedSeq[IndexedSeq[Int]]) extends StrictGraph[V] {\n\n    /** @inheritdoc */\n    lazy val vertices : Set[V] = ???\n\n    /** @inheritdoc */\n    lazy val arcs : Set[Arc[V]] = ???\n\n    /** @inheritdoc */\n    def successorsOf(v : V) : Option[Set[V]] = ???\n\n    /** @inheritdoc */\n    def + (v : V) : StrictGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def - (v : V) : StrictGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def +| (e : Arc[V]) : StrictGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def -| (e : Arc[V]) : StrictGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def withoutArc : StrictGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def withAllArcs : StrictGraphMatrixImpl[V] = ???\n}\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/directed/StrictGraphMatrixImpl.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/main/scala/undirected/SimpleGraphMatrixImpl.scala","languageId":"scala","version":1,"text":"package undirected\n\n/** Implementation of [[SimpleGraph]] using adjacency matrix\n  * @param vs sequence of vertices in the order they are used in adjacency matrix\n  * @param adjacency adjacency matrix\n  * @tparam V type for vertices\n  */\ncase class SimpleGraphMatrixImpl[V](vs : Seq[V], adjacency : IndexedSeq[IndexedSeq[Int]]) extends SimpleGraph[V] {\n\n    /** @inheritdoc */\n    lazy val vertices : Set[V] = ???\n\n    /** @inheritdoc */\n    lazy val edges : Set[Edge[V]] = ???\n\n    /** @inheritdoc */\n    def neighborsOf(v : V) : Option[Set[V]] = ???\n\n    /** @inheritdoc */\n    def + (v : V) : SimpleGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def - (v : V) : SimpleGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def +| (e : Edge[V]) : SimpleGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def -| (e : Edge[V]) : SimpleGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def withoutEdge : SimpleGraphMatrixImpl[V] = ???\n\n    /** @inheritdoc */\n    def withAllEdges : SimpleGraphMatrixImpl[V] = ???\n  }\n\n"}})[0m
