[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/test/scala/directed/StrictGraphDefaultImplSpec.scala","languageId":"scala","version":1,"text":"package directed\n\nimport org.scalacheck.Gen\nimport org.scalacheck.Gen._\n\n/** The test class for [[StrictGraphDefaultImpl]] implementation */\nclass StrictGraphDefaultImplSpec extends StrictGraphSpec(StrictGraphDefaultImplSpec)\n\nobject StrictGraphDefaultImplSpec extends StrictGraphSpecCompanion[Int](\"StrictGraphDefaultImpl\") {\n    /** @inheritdoc */\n    val vertex : Gen[Int] = posNum[Int]\n\n    /** @inheritdoc */\n    def graphWithAtLeast(vertexMinCount: Int, arcMinCount: Int = 0): Gen[StrictGraphDefaultImpl[Int]] =\n      for(vertexAdditionalCount <- posNum[Int]; vertexCount <- Gen.const((vertexMinCount + vertexAdditionalCount) max 1);\n          vs <- Gen.containerOfN[Set, Int](vertexCount, vertex);\n          arcCount <- Gen.choose(arcMinCount, vertexCount * (vertexCount - 1) / 2);\n          as <- Gen.containerOfN[Set, Arc[Int]](arcCount, arcFrom(vs))) yield StrictGraphDefaultImpl(vs, as)\n  }\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\CYTech Student\OneDrive\Documents\GitHub\graph_squelette\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 1 s, completed Mar 6, 2022 11:24:16 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/test/scala/directed/StrictGraphDefaultImplSpec.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/src/test/scala/directed/StrictGraphSpec.scala","languageId":"scala","version":1,"text":"package directed\n\nimport org.scalatest.flatspec.AnyFlatSpec\nimport org.scalatest.matchers.must.Matchers\nimport org.scalatestplus.scalacheck.ScalaCheckPropertyChecks.forAll\nimport org.scalacheck.Gen._\nimport org.scalacheck.Gen\n\n/** General template for test of [[StrictGraph]] implementations\n  * @param companion the companion object of test class (see [[StrictGraphSpecCompanion]] documentation)\n  */\nabstract class StrictGraphSpec[V](companion : StrictGraphSpecCompanion[V]) extends AnyFlatSpec with Matchers {\n    import companion._\n\n    /* QUERY METHODS */\n\n    behavior of s\"$name.successorsOf\"\n      it must \"yield None if input is not an actual vertex of graph\" in\n        forAll(graphAndNoActualVertex) { case (g, v) => (g successorsOf v) mustBe None }\n      it must \"yield a subset of vertex set if input is an actual vertex of graph\" in\n        forAll(graphAndActualVertex)   { case (g, v) => (g successorsOf v) map { _ subsetOf g.vertices } must equal (Some(true)) }\n      it must \"yield a set of adjacent vertices\" in\n        forAll(graphAndActualVertex)   { case (g, v) => (g successorsOf v).get forall { g.arcs contains Arc(v, _) }}\n\n    /* VERTEX OPERATIONS */\n\n    behavior of s\"$name.+\"\n      it must \"contain input vertex\" in\n        forAll(zip(graph, vertex))     { case (g, v) => (g + v).vertices must equal (g.vertices + v) }\n      it must \"return input graph if input vertex is already in graph\" in\n        forAll(graphAndActualVertex)   { case (g, v) =>  g + v           must equal   (g) }\n      it must \"have input vertex with degree 0 if not an actual vertex of graph\" in\n        forAll(graphAndNoActualVertex) { case (g, v) => (g + v) degreeOf v mustBe Some(0) }\n\n      behavior of s\"$name.-\"\n      it must \"NOT contain input vertex\" in\n        forAll(zip(graph, vertex))     { case (g, v) => (g - v).vertices must equal (g.vertices - v) }\n      it must \"return input graph if input vertex is not already in graph\" in\n        forAll(graphAndNoActualVertex) { case (g, v) =>  g - v      must equal (g) }\n      it must \"have input vertex removed from successors if an actual vertex of graph\" in\n        forAll(graphAndActualVertex)   { case (g, v) => (g successorsOf v).get forall { n => !((g - v).successorsOf(n).get contains v) } }\n      it must \"have degree updated for all successors if an actual vertex of graph\" in\n        forAll(graphAndActualVertex)   { case (g, v) => (g successorsOf v).get forall { n => (g - v).degreeOf(n) contains (g.degreeOf(n).get - 1) }}\n      it must \"revert back the + operator applied on an actual new vertex\" in\n        forAll(graphAndNoActualVertex) { case (g, v) => (g + v) - v must equal (g) }\n\n    /* ARC OPERATIONS */\n\n    behavior of s\"$name.+|\"\n      it must \"contain input arc\" in\n        forAll(zip(graph, arc))   { case (g, a) => (g +| a).arcs must equal (g.arcs + a) }\n      it must \"contain ends of input arc\" in\n        forAll(zip(graph, arc))   { case (g, a) => Set(a._1, a._2) subsetOf (g +| a).vertices mustBe true }\n      it must \"return input graph if input arc is already in graph\" in\n        forAll(graphAndActualArc) { case (g, a) =>  g +| a       must equal   (g) }\n\n    behavior of s\"$name.-|\"\n      it must \"NOT contain input arc\" in\n        forAll(zip(graph, arc))     { case (g, a) => (g -| a).arcs must equal (g.arcs - a) }\n      it must \"return input graph if input arc is not already in graph\" in\n        forAll(graphAndNoActualArc) { case (g, a) =>  g -| a       must equal (g) }\n      it must \"have ends removed from successors if an actual vertex of graph\" in\n        forAll(graphAndActualArc)   { case (g, a) => (g -| a).successorsOf(a._1) must not contain a._2 }\n      it must \"have degree updated for both ends if an actual vertex of graph\" in\n        forAll(graphAndActualArc)   { case (g, a) => (g degreeOf a._1 map { _ - 1}, g degreeOf a._2 map { _ - 1}) must equal ((g -| a) degreeOf a._1, (g -| a) degreeOf a._2) }\n\n    behavior of s\"$name.withoutArc\"\n      it must \"let vertex set unchanged\" in\n        forAll(graph) { g =>  g.withoutArc.vertices must equal (g.vertices) }\n      it must \"have empty arc set\" in\n        forAll(graph) { g =>  g.withoutArc.arcs mustBe empty }\n      it must \"have empty successors for any vertex\" in\n        forAll(graph) { g => (g.withoutArc.vertices forall { v => (g.withoutArc successorsOf v) == Some(Set.empty[V]) }) mustBe true }\n      it must \"have zero degree for any vertex\" in\n        forAll(graph) { g => (g.withoutArc.vertices forall { v => (g.withoutArc degreeOf v) == Some(0) }) mustBe true }\n  }\n\n/** General template for [[StrictGraphSpec]] companion objects\n  * @param name name of actual implementation\n  * @tparam V type of vertex used for test\n  */\nabstract class StrictGraphSpecCompanion[V](val name : String) {\n    /* BASIC GENERATORS */\n\n    /** The vertex generator */\n    val vertex : Gen[V]\n\n    /** The arc generator\n      * @param vertices set of vertices to pick from\n      *                 (if empty, generator [[vertex]] is used)\n      */\n    def arcFrom(vertices : Set[V]) : Gen[Arc[V]] = {\n        val vertexGenerator = if (vertices.isEmpty) vertex else Gen.oneOf(vertices)\n        for (v1 <- vertexGenerator ; v2 <- vertexGenerator if v1 != v2) yield Arc(v1, v2)\n      }\n\n    /** The arc generator */\n    lazy val arc : Gen[Arc[V]] = arcFrom(Set.empty[V])\n\n    /** The undirected simple graph generator\n      *\n      * If `g` is generated value, then it must be ensured that `g.vertices` is NOT empty.\n      */\n    val graph : Gen[StrictGraph[V]] = graphWithAtLeast(1)\n\n    /** The general directed simple graph generator\n      *\n      * If `g` is generated value, then it must be ensured that `g.vertices` have at least `vertexMinCount` elements\n      *                                                     and `g.arcs`    have at least   `arcMinCount` elements\n      * @param vertexMinCount minimal number of vertices to use\n      * @param arcMinCount   minimal number of arcs to use\n      */\n    def graphWithAtLeast(vertexMinCount : Int, arcMinCount : Int = 0) : Gen[StrictGraph[V]]\n\n    /** A positive-valued valuation generator\n      * @param arcs set of whose values must be defined\n      */\n    def positiveValuation(arcs : Set[Arc[V]]) : Gen[Map[Arc[V], Double]] =\n      for (values <- Gen.containerOfN[Seq, Double](arcs.size, posNum[Double])) yield (arcs.toSeq zip (values map {_ + 1})).to(Map)\n\n    /* ADVANCED GENERATORS */\n\n    /** A generator for a graph and a vertex of the graph\n      *\n      * If `(g, v)` is a generated value, then it must be ensured that `g.vertices` contains `v`.\n      */\n    lazy val graphAndActualVertex : Gen[(StrictGraph[V], V)] =\n      for (g <- graph ; v <- Gen.oneOf(g.vertices)) yield (g, v)\n\n    /** A generator for a graph and a vertex NOT in the graph\n      *\n      * If `(g, v)` is a generated value, then it must be ensured that `g.vertices` does not contain `v`.\n      */\n    lazy val graphAndNoActualVertex : Gen[(StrictGraph[V], V)] =\n      zip(graph, vertex) suchThat { case (g, v) => !(g.vertices contains v) }\n\n  /** A generator for a graph and an arc of the graph\n      *\n      * If `(g, a)` is a generated value, then it must be ensured that `g.arcs`    contains `a`.\n      */\n    lazy val graphAndActualArc : Gen[(StrictGraph[V], Arc[V])] =\n      for (g <- graphWithAtLeast(2, 1) ; a <- Gen.oneOf(g.arcs)) yield (g, a)\n\n    /** A generator for a graph and an arc NOT in the graph\n      *\n      * If `(g, a)` is a generated value, then it must be ensured that `g.arcs` does not contain `a`.\n      */\n    lazy val graphAndNoActualArc : Gen[(StrictGraph[V], Arc[V])] =\n      for (g <- graph ; a <- arcFrom(g.vertices) if !(g.arcs contains a)) yield (g, a)\n\n    /** A generator for a graph and a positive valuation */\n    lazy val graphAndValuation : Gen[(StrictGraph[V], Map[Arc[V], Double])] =\n      for (g <- graphWithAtLeast(2, 1) ; v <- positiveValuation(g.arcs)) yield (g, v)\n  }\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/CYTech%20Student/OneDrive/Documents/GitHub/graph_squelette/main.scala","languageId":"scala","version":1,"text":"object main extends App {\r\n    println(\"Hello World !\")\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: $/setTraceNotification: JsonRpcNotificationMessage(2.0, $/setTraceNotification, {"value":"off"})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: $/setTraceNotification: JsonRpcNotificationMessage(2.0, $/setTraceNotification, {"value":"off"})[0m
